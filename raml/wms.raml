#%RAML 0.8
title: Holonic WMS API
version: v1
#baseUri: http://mes.io/wms/api/{version}
baseUri: http://127.0.0.1:5000
mediaType: application/json
documentation:
  - title: Holonic WMS API
    content: ""
  - title: Use cases
    content: |
      Show the full list of Goods.
      Show the full list of Issues.
  - title: Order/Demand processing
    content: |
      FIXME
      stock CNT crates new Demand by POST wms.io/api/v1/demands/
      stock MGR declines or accepts Demand by PUT wms.io/api/v1/demands/1001/actions
      stock AGT notifies statatus of Demand [ACCEPTED, DENIED]
      stock AGT creates new Reserve by POST wms.io/api/v1/reserves/
      stock AGT creates new Picking by POST wms.io/api/v1/pickings/
      stock MGR confirms demand is picked by PUT wms.io/api/v1/demands/1001/actions
      stock AGT notifies statatus of Demand [PICKED, DELAYED]
      stock AGT creates new Despatch by POST wms.io/api/v1/despatches/
      stock MGR confirms despatching PUT wms.io/api/v1/demands/1001/actions
      stock AGT notifies statatus of Demand [DESPATCHED]
      stock AGT creates new Issue by POST wms.io/api/v1/issues/
      stock CNT creates Local Receipt by POST wms.io/api/v1/receipts/
      stock CNT creates new Delivery by POST wms.io/api/v1/deliveries/
      stock AGT notifies statatus of Delivery [ACCEPTED, ADJUSTED, DECLINED]
      stock AGT notifies statatus of Demand [DELIVERED]
      stock MGR accepts or declines Adjustment [ACCEPTED, DENIED]
      stock AGT creates new Issue by POST wms.io/api/v1/adjustments/
      stock AGT notifies statatus of Demand [FULFILLED, UNFULFILLED, OVERFULFILLED]


schemas:
  - Good:               !include json/commons-good-schema.json
  - Goods:              !include json/commons-goods-schema.json
  - Customer:           !include json/commons-contractor-schema.json
  - Customers:          !include json/commons-contractors-schema.json
  - Supplier:           !include json/commons-contractor-schema.json
  - Suppliers:          !include json/commons-contractors-schema.json
  - Error:              !include json/commons-error-schema.json
  - Message:            !include json/commons-message-schema.json
  - FSMT:               !include json/warehouse-fsmt-schema.json
  - Demand:             !include json/warehouse-outbound-document-schema.json
  - Demands:            !include json/warehouse-outbound-documents-schema.json
  - Reserve:            !include json/warehouse-outbound-document-schema.json
  - Reserves:           !include json/warehouse-outbound-documents-schema.json
  - Picklist:           !include json/warehouse-outbound-document-schema.json
  - Picklists:          !include json/warehouse-outbound-documents-schema.json
  - Issue:              !include json/warehouse-outbound-document-schema.json
  - Issues:             !include json/warehouse-outbound-documents-schema.json
  - AdjustmentCredit:   !include json/warehouse-outbound-document-schema.json
  - AdjustmentCredits:  !include json/warehouse-outbound-documents-schema.json
  - Despatch:           !include json/warehouse-outbound-document-schema.json
  - Despatches:         !include json/warehouse-outbound-documents-schema.json
  - Delivery:           !include json/warehouse-inbound-document-schema.json
  - Deliveries:         !include json/warehouse-inbound-documents-schema.json
  - Receipt:            !include json/warehouse-inbound-document-schema.json
  - Receipts:           !include json/warehouse-inbound-documents-schema.json
  - AdjustmentDebit:    !include json/warehouse-inbound-document-schema.json
  - AdjustmentDebits:   !include json/warehouse-inbound-documents-schema.json
  - Rebound:            !include json/warehouse-inbound-document-schema.json
  - Rebounds:           !include json/warehouse-inbound-documents-schema.json
  - Cutoff:             !include json/warehouse-generic-document-schema.json
  - Cutoffs:            !include json/warehouse-generic-documents-schema.json
  - Goal:               !include json/warehouse-generic-document-schema.json
  - Goals:              !include json/warehouse-generic-documents-schema.json
  - Stockcard:          !include json/warehouse-generic-document-schema.json
  - Stockcards:         !include json/warehouse-generic-documents-schema.json
  - Balance:            !include json/warehouse-balance-record-schema.json
  - Balances:           !include json/warehouse-balance-records-schema.json
  - Stocktake:          !include json/warehouse-stocktake-document-schema.json
  - Stocktakes:         !include json/warehouse-stocktake-documents-schema.json


#
# Common
#


/customers:
  get:
    description: Get a list of Customers
    responses:
      200:
        body:
          application/json:
            schema: Customers
  post:
    description: Add new Customer
    body:
      application/json:
        schema: Customer
    responses:
      201:
        body:
          application/json:
            schema: Customer
  /{resourceId}:
    get:
      description: Get a Customer by ID
      responses:
        200:
          body:
            application/json:
              schema: Customer
        404:
          body:
            application/json:
              schema: Error
    put:
      description: Update Customer by ID
      body:
        application/json:
          schema: Customer
      responses:
        200:
          body:
            application/json:
              schema: Customer
        404:
          body:
            application/json:
              schema: Error
    delete:
      description: Delete a Customer by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error

/suppliers:
  get:
    description: Get a list of Suppliers
    responses:
      200:
        body:
          application/json:
            schema: Suppliers
  post:
    description: Add new Supplier
    body:
      application/json:
        schema: Supplier
    responses:
      201:
        body:
          application/json:
            schema: Supplier
  /{resourceId}:
    get:
      description: Get a Supplier by ID
      responses:
        200:
          body:
            application/json:
              schema: Supplier
        404:
          body:
            application/json:
              schema: Error
    put:
      description: Update Supplier by ID
      body:
        application/json:
          schema: Supplier
      responses:
        200:
          body:
            application/json:
              schema: Supplier
        404:
          body:
            application/json:
              schema: Error
    delete:
      description: Delete a Supplier by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error

/goods:
  get:
    description: Get a list of Goods
    responses:
      200:
        body:
          application/json:
            schema: Goods
            example: !include ./json/warehouse-goods-example.json
      404:
        body:
          application/json:
            schema: Error
            example: !include ./json/commons-error-example.json
  post:
    description: Add new Good
    body:
      application/json:
        schema: Good
    responses:
      201:
        body:
          application/json:
            schema: Good
  /{resourceId}:
    get:
      description: Get a Good by ID
      responses:
        200:
          body:
            application/json:
              schema: Good
        404:
          body:
            application/json:
              schema: Error
    put:
      description: Update Good by ID
      body:
        application/json:
          schema: Good
      responses:
        200:
          body:
            application/json:
              schema: Good
        404:
          body:
            application/json:
              schema: Error
    delete:
      description: Delete a Good by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error


#
# Outgoing documents
#


/demands:
  description: |
    A Warehouse Demand is defined as acknowledged shipment. Warehouse Demand can
    result a picking demand.
  get:
    description: Get a list of Demands
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Demands
            example: !include ./json/warehouse-outbound-documents-example.json
  post:
    description: Add new Demand
    body:
      application/json:
        schema: Demand
        example: !include ./json/warehouse-outbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Demand by ID
      responses:
        200:
          body:
            application/json:
              schema: Demand
              example: !include ./json/warehouse-outbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Demand by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Demand
            example: !include ./json/warehouse-outbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/reserves:
  description: |
    Goods Reserve is a mechanism of locking some Goods resources for future purposes
    (manufacturing plan, sales)
  get:
    description: Get a list of Reserves
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Reserves
            example: !include ./json/warehouse-outbound-documents-example.json
  post:
    description: Add new Reserve
    body:
      application/json:
        schema: Reserve
        example: !include ./json/warehouse-outbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Reserve by ID
      responses:
        200:
          body:
            application/json:
              schema: Reserve
              example: !include ./json/warehouse-outbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Reserve by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Reserve
            example: !include ./json/warehouse-outbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/picklists:
  description: |
    Wave picking is a term for a process used in a warehouse management system (WMS)
    to support organizing of the daily flow of work of a warehouse or distribution
    center. Wave picking is an application of short-interval-scheduling.
    Managers, using the WMS, assign groups of orders/demand into short intervals called "waves",
    to initially simulate the flow for the day, consistent with the order/demand departure plan
    and available labor. When the plan is satisfactory, it is accepted. The WMS then
    releases the waves to the warehouse sequentially throughout the day, to allow
    managers to coordinate the several parallel and sequential activities required to
    complete the daily work.
  get:
    description: Get a list of Picklists
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Picklists
            example: !include ./json/warehouse-outbound-documents-example.json
  post:
    description: Add new Picklist
    body:
      application/json:
        schema: Picklist
        example: !include ./json/warehouse-outbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Picklist by ID
      responses:
        200:
          body:
            application/json:
              schema: Picklist
              example: !include ./json/warehouse-outbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Picklist by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Picklist
            example: !include ./json/warehouse-outbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/issues:
  description: |
    A Goods Issue (GI) is defined as a physical outbound movement of goods or
    materials from the warehouse or it is the issue of physical goods or
    materials from the warehouse.
  get:
    description: Get a list of Issues
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Issues
            example: !include ./json/warehouse-outbound-documents-example.json
  post:
    description: Add new Issue
    body:
      application/json:
        schema: Issue
        example: !include ./json/warehouse-outbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Issue by ID
      responses:
        200:
          body:
            application/json:
              schema: Issue
              example: !include ./json/warehouse-outbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Issue by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Issue
            example: !include ./json/warehouse-outbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/despatches:
  description: |
    Goods Despatch Note (GDN) is a document that is raised by the supplier’s
    despatch department responsible of sending goods out to customers
  get:
    description: Get a list of Despatches
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Despatches
            example: !include ./json/warehouse-outbound-documents-example.json
  post:
    description: Add new Despatch
    body:
      application/json:
        schema: Despatch
        example: !include ./json/warehouse-outbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Despatch by ID
      responses:
        200:
          body:
            application/json:
              schema: Despatch
              example: !include ./json/warehouse-outbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Despatch by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Despatch
            example: !include ./json/warehouse-outbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


#
# Incoming documents
#


/rebounds:
  description: |
    Returns of issued goods
  get:
    description: Get a list of Rebounds
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            description: Contains Rebound document array
            schema: Rebounds
            example: !include ./json/warehouse-inbound-documents-example.json
  post:
    description: Add new Rebound
    body:
      application/json:
        schema: Rebound
        example: !include ./json/warehouse-inbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Rebound by ID
      responses:
        200:
          body:
            application/json:
              schema: Rebound
              example: !include ./json/warehouse-inbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Rebound by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Rebound
            example: !include ./json/warehouse-inbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/deliveries:
  description: |
    Goods Delivery Note - If the same note i.e. goods despatch note is sent with
    the goods to the customers and customer sign the documents as an evidence of
    the receipt by the customer then the same note will be named as
    Goods Delivery Note
  get:
    description: Get a list of Deliveries
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            description: Contains Delivery document array
            schema: Deliveries
            example: !include ./json/warehouse-inbound-documents-example.json
  post:
    description: Add new Delivery
    body:
      application/json:
        schema: Delivery
        example: !include ./json/warehouse-inbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Delivery by ID
      responses:
        200:
          body:
            application/json:
              schema: Delivery
              example: !include ./json/warehouse-inbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Delivery by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Delivery
            example: !include ./json/warehouse-inbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


/receipts:
  description: |
    A Goods Receipt (GR) is defined as a physical inbound movement of goods or
    materials into the warehouse or it is the receipt of material in the store
    or the receipt of stock from the vendor or manufacturer.
  get:
    description: Get a list of Receipts
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            description: Contains Receipt document array
            schema: Receipts
            example: !include ./json/warehouse-inbound-documents-example.json
  post:
    description: Add new Receipt
    body:
      application/json:
        schema: Receipt
        example: !include ./json/warehouse-inbound-document-example.json
    responses:
      201:
        body:
          application/json:
            schema: Message
            example: !include ./json/commons-message-example.json
      400:
        body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
  /{resourceId}:
    get:
      description: Get a Receipt by ID
      responses:
        200:
          body:
            application/json:
              schema: Receipt
              example: !include ./json/warehouse-inbound-document-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    delete:
      description: Delete a Receipt by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Receipt
            example: !include ./json/warehouse-inbound-document-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          400:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
            example: !include ./json/warehouse-fsmt-example.json
        responses:
          200:
            body:
              application/json:
                schema: Message
                example: !include ./json/commons-message-example.json
          404:
            body:
              application/json:
                schema: Error
                example: !include ./json/commons-error-example.json


#
# internal documents
#


/cutoffs:
  description: |
    Cutoff determins a point in accounting
  get:
    description: Get a list of Cutoffs
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Cutoffs
  post:
    description: Add new Cutoff
    body:
      application/json:
        schema: Cutoff
    responses:
      201:
        body:
          application/json:
            schema: Cutoff
  /{resourceId}:
    get:
      description: Get a Cutoff by ID (show blockers)
      responses:
        200:
          body:
            application/json:
              schema: Cutoff
        404:
          body:
            application/json:
              schema: Error
    delete:
      description: Delete a Cutoff by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
        responses:
          200:
          404:
            body:
              application/json:
                schema: Error


/stocktakes:
  description: |
    Stock-taking (STN) or inventory checking is the physical verification of the
    quantities and condition of items held in an inventory or warehouse. This
    may be done to provide an audit of existing stock. It is also the source of
    stock discrepancy information. STN is determination of a cutoff point
  get:
    description: Get a list of Stocktakes
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Stocktakes
  post:
    description: Add new Stocktake
    body:
      application/json:
        schema: Stocktake
    responses:
      201:
        body:
          application/json:
            schema: Stocktake
  /{resourceId}:
    get:
      description: Get a Stocktake by ID
      responses:
        200:
          body:
            application/json:
              schema: Stocktake
        404:
          body:
            application/json:
              schema: Error
    delete:
      description: Delete a Stocktake by ID
      responses:
        204:
        404:
          body:
            application/json:
              schema: Error
    /body:
      patch:
        description: Reinit body
        body:
          application/json:
            schema: Stocktake
        responses:
          200:
            body:
              application/json:
                schema: Message
          400:
            body:
              application/json:
                schema: Error
    /fsmt:
      put:
        body:
          application/json:
            schema: FSMT
        responses:
          200:
          404:
            body:
              application/json:
                schema: Error


#
# referential documents
#


/stockcards:
  description: |
    Stock Card shows all issues and receipts of giving Warehouse Item matching date
    range criteria, if provided; otherwise list all inbounds and outbounds
  get:
    description: Get a list of Stockcards
    responses:
      200:
        body:
          application/json:
            schema: Stockcards
  /{resourceId}:
    get:
      description: Get a Stockcard by ID
      responses:
        200:
          body:
            application/json:
              schema: Stockcard
        404:
          body:
            application/json:
              schema: Error


/balance:
  description: |
    Balance resource shows available resources matching query criteria; depending on
    query parameters reservations can be considered or not
  get:
    description: Get a list of all goods and balance
    responses:
      200:
  /{resourceId}:
    get:
      description: Get balance of specified item
      responses:
        200:
        404:
          body:
            application/json:
              schema: Error


/goal:
  description: |
    Goal description
  get:
    description: Get a list of all Goals
    queryParameters:
      sdate:
        displayName: Start Date
        type: date
        description: Start date
        example: 2017-01-01
        required: false
        default: 2017-01-01
      edate:
        displayName: End Date
        type: date
        description: End date
        example: 2017-01-01
        required: false
        default: 2017-01-10
      facility:
        displayName: Facility
        type: string
        description: Facility code
        example: A1
        required: false
        default: A1
    responses:
      200:
        body:
          application/json:
            schema: Goals
  /{resourceId}:
    get:
      description: Get a Goal by ID
      responses:
        200:
          body:
            application/json:
              example: !include ./json/warehouse-goal-example.json
        404:
          body:
            application/json:
              schema: Error
              example: !include ./json/commons-error-example.json
